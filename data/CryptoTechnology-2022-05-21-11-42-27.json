{
    "subreddit": "CryptoTechnology",
    "limit": 1000,
    "minimum_score": -5000,
    "sorting_options": [
        "hot",
        "top",
        "new"
    ],
    "posts": [
        {
            "id": "uuld5e",
            "title": "Auditing state on a finite ledger?",
            "url": "https://www.reddit.com/r/CryptoTechnology/comments/uuld5e/auditing_state_on_a_finite_ledger/",
            "author": "Matt-ayo",
            "created_utc": 1653133304.0,
            "score": 13,
            "num_comments": 11,
            "subreddit": "CryptoTechnology",
            "selftext": "This scenario considers a special setup: a finite, data only blockchain (no scripts or computations are done on the main chain), with nodes reading on chain data and putting data intended for them into their state machine. \n\nIn this scenario a finite ledger means that the ledger is always *X* blocks long; every time a new block is added the oldest block is removed (and consensus charges fees for UTXO's to be renewed). An important assumption here is that state machine data has no guarantee of being renewed and will often be pruned.\n\nWith that in mind:\n\nIs it possible to run a trusttless state machine on this setup?\n\nIt's surely possible to have nodes which keep the state up to date; they do not need historical state data on chain to keep updating. The issue is how do new nodes or users audit the state? If old data falls off the chain what keeps the nodes managing the current state from changing that old data to their advantage? \n\nAre there any technologies which allow someone entering the network for the first time to look at a node's state and say \"this is correct/incorrect,\" without, of course, looking back on the entire blockchain (which they won't have easy/cheap access to in this scenario)?\n\nMaybe there could be some sort of check-pointing performed on the finite ledger? Every *X* blocks a hash is posted to the chain representing the state and by archiving these hashes (rather than the entire block history) and running  some verification users can determine if the current state they are being presented with accurately stems from historical states? I'm open to ideas.",
            "stickied": false,
            "comments": [
                {
                    "id": "i9fzwef",
                    "author": "segwhat",
                    "score": 3,
                    "created_utc": 1653137118.0,
                    "response": "It sounds like a ring buffer, so maybe this would be called something like a \"cryptoring\".\n\nThe data lookups could be made easy if each entry of ring is the same tree-like structure, and if it was that tree structure that gave the non-linear lookup performance.\n\nThe state transitions might be represented by operational transforms. Basically a 3tuple of (input-state-hash, signed-effect-hash, output-state-hash).\n\nI have not deeply considered this, but have thought of making a `git`-like mechanism (git is a blockchain that devs use), that regularly breaks its history chain (to allow it to be garbage collected). I never considered making it actually and strictly finite. Thanks for the interesting fodder to muse over.",
                    "depth": 1,
                    "comments": [
                        {
                            "id": "i9g0bzn",
                            "author": "Matt-ayo",
                            "score": 2,
                            "created_utc": 1653137381.0,
                            "response": "> Thanks for the interesting fodder to muse over.\n\nLikewise.",
                            "depth": 2,
                            "comments": []
                        },
                        {
                            "id": "i9g8vns",
                            "author": "Matt-ayo",
                            "score": 1,
                            "created_utc": 1653142007.0,
                            "response": "Could you describe in more detail this tree-like structure? Is this some kind of compression structure to save space in a finite buffer? Can it be ordered? Even still I'm not sure I yet see a way it could prove something about data from pruned blocks/buffer states.",
                            "depth": 2,
                            "comments": [
                                {
                                    "id": "i9ge06m",
                                    "author": "segwhat",
                                    "score": 1,
                                    "created_utc": 1653144453.0,
                                    "response": "I imagine that it is a lookup tree. Sort of like a \"binary search tree\", but with far greater \"fan out\" than two (maybe 100?), and each node would have a small \"staging area\" for data that is yet to be pushed deeper. It would save space because new tree roots would aggressively reuse nodes from the previous tree (a checked constraint of accepting a next state, that at most log(N) new nodes could be introduced per step [the depth of the tree], which would mostly orphan the nodes they replace).\n\nIn my case, I had in mind to store UUIDs or hash values (of content and public keys) into the tree for lookup, but it might help to imagine the structure as being a pivot of the bitcoin blockchain.... instead of storing the transactions (which grow linearly) to derive an account balance, you store the accounts/balance (which is not finite, but grows much slower) and old transactions get garbage-collected.",
                                    "depth": 3,
                                    "comments": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": "i9g0n5c",
                    "author": "Dormage",
                    "score": 2,
                    "created_utc": 1653137562.0,
                    "response": "I suppose periodic snapshotting of previous blocks would give you verifiability of the current state but not data availability.\n\nIs there a particular usecase to which this kind of a ledger would apply?",
                    "depth": 1,
                    "comments": [
                        {
                            "id": "i9g2vyj",
                            "author": "Matt-ayo",
                            "score": 1,
                            "created_utc": 1653138848.0,
                            "response": "Considering potential implementations of smart contracts on a Saito type network. The founders generally tell people asking about smart contracts on Saito to look towards 'second layer' solutions - basically what I described in my post (as I understand it). \n\nThe main idea being that Saito can remain fast and massively scalable and smart contract networks can rely on it to process, deliver, and correctly order input data for the contract network. The contract network isn't actually executed on Saito, Saito just delivers the data - but one core feature of Saito is the ability to drop data from chain; for native Saito tokens consensus can retain user balances, but for sub-networks like the proposed contract network that input data may readily be pruned, so full state may be lost. Archival nodes are an option, but if the network scales like its planned to its not a feasible one.",
                            "depth": 2,
                            "comments": [
                                {
                                    "id": "i9g39ea",
                                    "author": "Dormage",
                                    "score": 1,
                                    "created_utc": 1653139060.0,
                                    "response": "Interesting. So the main chain is UTXO based? Is the contract execution network a state based model? The contract execution network must have jts own consensus mechanism otherwise trust is decoupled from the main chain?",
                                    "depth": 3,
                                    "comments": [
                                        {
                                            "id": "i9g787w",
                                            "author": "Matt-ayo",
                                            "score": 1,
                                            "created_utc": 1653141179.0,
                                            "response": "The main chain is UTXO, the contract chain could be anything.\n\nYou actually don't need the contract layer to have its own consensus mechanism if you assume two criteria are met:\n\n1. You have access to all historical (pruned) blocks from the main chain\n\n2. The secondary contract layer nodes have incentive to operate in the first place. Who's paying them?\n\nAssuming those two requirements  were addressed, anyone who wants to audit or reach the latest state of the contract chain can simply gather up and order all the data on Saito and  execute it until caught up. Unless I'm missing something..\n\nThe main issue I'm grappling with is 1. Saito prunes data so it can process a lot of it, meaning keeping a full history after reaching scale would be very expensive.",
                                            "depth": 4,
                                            "comments": [
                                                {
                                                    "id": "i9ga17a",
                                                    "author": "Dormage",
                                                    "score": 1,
                                                    "created_utc": 1653142579.0,
                                                    "response": "I was assuming that the nodes reponsible for execution must produce proof of computation, which serves as the basis for rewards from the main chain. However, to produce a proof, they either need to reach consensus on what the result is? Otherwise, there is no way to trust those nodes and cant assume they actually executed the contract?",
                                                    "depth": 5,
                                                    "comments": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": "i9gf3ff",
                    "author": "Sorry_Attitude_",
                    "score": 1,
                    "created_utc": 1653144951.0,
                    "response": "I think this sounds something similar to Algorand's state proof, making Algorand itself a finite blockchain but for the security it snap shots previous blocks that are older than the intended chain into groupings of 100 blocks or something of the sorts\n\nIdk tho, i'd much rather use the slower but more secure PoW, the only thing is that Ethereum is left behind while other chains just do it so much better. Kadena even has gas free trading which you can try on Kaddex, while Ethereum's gas is infernal and the blocks are way too slow\n\nPeople expect the merge to solve this but i doubt, the sharding will be the thing that improves it but as far as i understood sharding will not be implemented with the PoS updated",
                    "depth": 1,
                    "comments": []
                }
            ]
        }
    ]
}
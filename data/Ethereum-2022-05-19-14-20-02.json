{
    "subreddit": "Ethereum",
    "limit": 1000,
    "minimum_score": -5000,
    "sorting_options": [
        "hot",
        "top",
        "new"
    ],
    "posts": [
        {
            "id": "ut436q",
            "title": "I built a universal NFT virtual machine.",
            "url": "https://www.reddit.com/r/ethereum/comments/ut436q/i_built_a_universal_nft_virtual_machine/",
            "author": "skogard",
            "created_utc": 1652968870.0,
            "score": 52,
            "num_comments": 21,
            "subreddit": "ethereum",
            "selftext": "Hey Reddit, just wanted to share something cool I\u2019ve been working on.\n\nIt\u2019s an NFT protocol, but different from the usual NFT contracts you\u2019ve seen. \n\nMost NFT contracts hardcode their minting logic directly into the contract. What I\u2019ve built (It\u2019s called \u201cCell\u201d) is not really an \u201cNFT contract\u201d, but an \u201cNFT virtual machine contract\u201d. There is no NFT collection-specific logic built into the contract. The contract acts as an operating system that interprets and executes offchain signed messages called \u201cscript\u201d and authorizes whether to mint them into NFTs or not. Which means you can use this offchain scripts to print as many NFTs as you want for free. And it lets you do all that without relying on a 3rd party. If you want to quickly see what it is, I recommend checking out this video: https://www.youtube.com/watch?v=AVvwy3JuCKo\n\nAnother important part of Cell is its \u201cuniversal tokenId\u201d system. Unlike most NFT collections where the NFT creator arbitrarily assigns tokenIds, the universal tokenId ensures that every single unique NFT will have EXACTLY the same tokenId across space and time, regardless of which blockchain it\u2019s stored on, regardless of which contract it\u2019s stored on, and regardless of when it was minted, both relatively and absolutely. This is achieved by implementing an onchain IPFS encoder that makes the NFT tokenIds \u201cIPFS native\u201d. Essentially, the tokenId is a UINT256 encoded version of the tokenURI. You can imagine how this can make the management of cross-chain swaps and managements of NFTs much simpler, as well as making the management of L1-L2 NFT bridging much simpler. Just to be clear I have no interest in building these bridge systems myself, but am thinking about various options to experiment or integrate with existing bridge/L2 solutions, and excited to see where we can go.\n\nLastly, I\u2019ve built this protocol to be a completely open and free public utility protocol, with no owner. Any company or hobbyist can just start using it without worrying about licensing issues, just treat it like node.js or ruby on rails.\n\nIf you want to learn more, check out:\n\n- an intro tweet thread https://twitter.com/skogard/status/1526605161610858496?s=20&t=FJBdXteejVat06Bi-CgkcA\n- website: https://cell.computer\n\nIt\u2019s currently in beta on Rinkeby with fully open sourced/verified code (more in the tweet thread), and planning to go live on ETH mainnet soon. \n\nWould appreciate any feedback. Thanks!",
            "stickied": false,
            "comments": [
                {
                    "id": "i97zeza",
                    "author": "chuey101",
                    "score": 3,
                    "created_utc": 1652978780.0,
                    "response": "Skogard does it again!",
                    "depth": 1,
                    "comments": []
                },
                {
                    "id": "i98rpbl",
                    "author": "karhal",
                    "score": 2,
                    "created_utc": 1652990270.0,
                    "response": "This is awesome man",
                    "depth": 1,
                    "comments": []
                },
                {
                    "id": "i993smq",
                    "author": "_ArtosisCurse_",
                    "score": 2,
                    "created_utc": 1652996193.0,
                    "response": "that sounds amazing, i will look into this",
                    "depth": 1,
                    "comments": []
                },
                {
                    "id": "i99j8fy",
                    "author": "MushinZero",
                    "score": 2,
                    "created_utc": 1653003627.0,
                    "response": "Does it prevent ownership across multiple chains?\n\nAka, can I mint an nft on one chain and then someone else can mint the exact same one on another using the same input?",
                    "depth": 1,
                    "comments": [
                        {
                            "id": "i99o36g",
                            "author": "skogard",
                            "score": 1,
                            "created_utc": 1653006107.0,
                            "response": "Great question. Cell itself doesn't do that, but provide the low level building block on top of which such systems can built, much simpler than the status quo.\n\nThere are already cross-chain minting solutions out there but they are all high maintenance (which also means they are not trustless, requiring some trusted party to approve something). By moving towards a content addressable tokenId system, I believe all of these things can be much simpler.\n\nAs I mentioned above, I am not going to be focused on building these bridge systems myself, but planning to play with and integrate some of the existing solutions and see where it goes.",
                            "depth": 2,
                            "comments": [
                                {
                                    "id": "i99u55d",
                                    "author": "MushinZero",
                                    "score": 1,
                                    "created_utc": 1653009143.0,
                                    "response": "I wonder if it could by hashing the address of the minter. Wouldn't prevent trading afterwards but still...",
                                    "depth": 3,
                                    "comments": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": "i9afrf5",
                    "author": "Ok-Nefariousness1340",
                    "score": 2,
                    "created_utc": 1653020455.0,
                    "response": "I notice that your contract implements upgrade functionality. Maybe this is just my personal bias, but doesn't it defeat the point of smart contracts if the dev can make whatever changes they like to them? By doing this it seems like you make yourself a point of centralized control and users have to trust you to the same extent that they would if you were instead doing all this through an offchain server.",
                    "depth": 1,
                    "comments": [
                        {
                            "id": "i9aiyz1",
                            "author": "skogard",
                            "score": 1,
                            "created_utc": 1653022512.0,
                            "response": "> Maybe this is just my personal bias, but doesn't it defeat the point of smart contracts if the dev can make whatever changes they like to them? By doing this it seems like you make yourself a point of centralized control and users have to trust you to the same extent that they would if you were instead doing all this through an offchain server.\n\nYou and I would get along. Yes, I completely agree with your point, and I am pretty obsessive about decentralization and getting rid of trusted 3rd parties. In fact, for the same reason you were concerned about this, you will absolutely love what I am doing here with Cell.\n\nCell is completely trustless and ownerless. But you were wondering how that can be:\n\n> I notice that your contract implements upgrade functionality. \n\nLong story short, Cell is making use of Openzeppelin's ERC721Upgradeable as its base, which may have given you that impression. But ERC721Upgradeable does NOT necessarily mean it's an upgradeable contract.\n\nInstead, it's simply a template contract used to implement a \"proxy pattern\" smart contract architecture. Originally the proxy pattern was created for mutable and upgradeable contracts (which I dislike for the same reason you brought up), but since then, people have come up with some other useful proxy patterns. \n\nOne such pattern is what's called a \"minimal proxy\" (https://eips.ethereum.org/EIPS/eip-1167), which is ABSOLUTELY IMMUTABLE and super cheap to deploy. Cell uses the minimal proxy pattern so people can easily and cheaply deploy contracts like starting a blog (at the time of writing, it costs around $10 to deploy a cell contract, not thousands of dollars).\n\nTherefore, there is no admin for this protocol once deployed, and anyone can openly use it like public goods.\n\nOn top of that, many people don't realize that it's not enough to simply decentralized the protocol. The entire workflow should be decentralizable. I've built everything to make sure everything is portable and decentralizable as well.\n\nHope this makes sense. If you are interested in this concept, feel free to check out the intro documentation https://intro.cell.computer/ you will notice that there are many details here and there to ensure that there is zero reliance or dependence on some third party.",
                            "depth": 2,
                            "comments": []
                        }
                    ]
                },
                {
                    "id": "i9808i1",
                    "author": "CDome11",
                    "score": 1,
                    "created_utc": 1652979106.0,
                    "response": "This work is fucking game changing\ud83d\udd25 If anyone would like to help me onboard my collection using this protocol that would be amazing!",
                    "depth": 1,
                    "comments": []
                },
                {
                    "id": "i97xuws",
                    "author": "BobbyStallone",
                    "score": 1,
                    "created_utc": 1652978157.0,
                    "response": "Very cool man, a lot of this lingo is foreign to me as I\u2019m starting out in the space but I\u2019m sure others will chime in\u2764\ufe0f awesome work tho",
                    "depth": 1,
                    "comments": []
                },
                {
                    "id": "i98g3kb",
                    "author": "KlopKlop10293",
                    "score": 1,
                    "created_utc": 1652985529.0,
                    "response": "Seems cool but where is the GitHub?\n\nEdit: also from what I read there is nothing at all about the actual minted token on blockchain, which I guess would still cost gas making this \"print unlimited number of tokens for FREE.\" Very misleading\u2026",
                    "depth": 1,
                    "comments": [
                        {
                            "id": "i98qzgq",
                            "author": "skogard",
                            "score": 1,
                            "created_utc": 1652989975.0,
                            "response": "here's the repo: https://github.com/cell-org\n\nIt's also in the tweet thread I shared above.\n\n> would still cost gas making this \"print unlimited number of tokens for FREE.\" Very misleading\u2026\n\nThis is a subtle issue. Of course it costs money to put stuff on the blockchain. But the difference is, the NFT creator does not need to pay anything. They simply print out signed messages (called \"script\"), which then anyone qualified (according to the program defined in the script) can mint to the contract. \n\nThis is different from the creator having to deploy their own contract with thousands or hundreds of dollars, and use blockchain interaction to make configuration updates every time. \n\nWith Cell, the only cost is the one time factory contract deployment gas fee (which at the point of writing is around $10 USD), and from that point on, the creator never needs to touch the blockchain at all, and create as many NFTs as they want, and it's the minters who come and pay the gas fee to put them on the blockchain. Not all offchain tokens need to end up on the blockchain, but even the offchain tokens have a lot of use cases (which I explain in the documentation if you are interested).",
                            "depth": 2,
                            "comments": [
                                {
                                    "id": "i98suuv",
                                    "author": "KlopKlop10293",
                                    "score": 1,
                                    "created_utc": 1652990741.0,
                                    "response": "> But the difference is, the NFT creator does not need to pay anything. \n\nIt\u2019s already like this for 99% of the nft collections, mint can get called by anyone, devs just add a logic like asking Eth to allow minting.\n\n> With Cell, the only cost is the one time factory contract deployment gas fee (which at the point of writing is around $10 USD)\n\nSo you d basically make the nft base contract less expensive to deploy, it\u2019s a good point (even for me as dev) just probably isn\u2019t worth it right now to ditch a proven stable standard for a very different experimental one.\n\nI hope in a few months it will be worth exploring when it\u2019s production-ready",
                                    "depth": 3,
                                    "comments": [
                                        {
                                            "id": "i98u0xe",
                                            "author": "skogard",
                                            "score": 1,
                                            "created_utc": 1652991226.0,
                                            "response": "it is 100% ERC721. \n\nI think you misunderstand what this is and how this is different. If you are really interested, please read through the documentation https://intro.cell.computer",
                                            "depth": 4,
                                            "comments": [
                                                {
                                                    "id": "i99eba4",
                                                    "author": "KlopKlop10293",
                                                    "score": 0,
                                                    "created_utc": 1653001146.0,
                                                    "response": ">it is 100% ERC721.\n\nErc721 is an Eth standard, you cant call with the same name just because you claim it has the same methods\n\n\\> I think you misunderstand what this is and how this is different. \n\nhow did I misunderstan? Any other nft contract have mint that can be called by anyone on chain, literally just out the \\_mint on public and anyone not just the creator can call it.",
                                                    "depth": 5,
                                                    "comments": [
                                                        {
                                                            "id": "i9a1ah3",
                                                            "author": "Perleflamme",
                                                            "score": 1,
                                                            "created_utc": 1653012630.0,
                                                            "response": ">Erc721 is an Eth standard, you cant call with the same name just because you claim it has the same methods\n\nActually, you can. That's the very concept of standards and the reason for standards to exist in the first place. \n\nWhatever implements a standard, if it has the same behaviors described by the standards, then it matches the same standards. You can then completely ignore implementation details and abstract it away.\n\nFor instance, the fact a standard is first described on Ethereum doesn't mean it can only exist on Ethereum.",
                                                            "depth": 6,
                                                            "comments": []
                                                        },
                                                        {
                                                            "id": "i9al2lq",
                                                            "author": "1solate",
                                                            "score": 1,
                                                            "created_utc": 1653023964.0,
                                                            "response": "> Erc721 is an Eth standard, you cant call with the same name just because you claim it has the same methods\n\nIt's a \"standard\" that defines an *interface*.",
                                                            "depth": 6,
                                                            "comments": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}